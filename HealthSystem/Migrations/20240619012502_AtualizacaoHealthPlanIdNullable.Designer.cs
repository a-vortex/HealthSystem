// <auto-generated />
using System;
using HealthSystem.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthSystem.Migrations
{
    [DbContext(typeof(HealthSystemDbContext))]
    [Migration("20240619012502_AtualizacaoHealthPlanIdNullable")]
    partial class AtualizacaoHealthPlanIdNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthPlan", b =>
                {
                    b.Property<int>("PlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlanId"));

                    b.Property<string>("Coverages")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("Price")
                        .HasColumnType("real");

                    b.HasKey("PlanId");

                    b.ToTable("HealthPlans");
                });

            modelBuilder.Entity("HealthSystem.Models.Users.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Users", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("MedicalAppointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("MedicalServiceId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("MedicalServiceId");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalAppointments");
                });

            modelBuilder.Entity("MedicalService", b =>
                {
                    b.Property<int>("MedicalServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicalServiceId"));

                    b.Property<int>("Area")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("MedicalServiceId");

                    b.ToTable("MedicalServices");
                });

            modelBuilder.Entity("HealthSystem.Models.Users.Customer", b =>
                {
                    b.HasBaseType("HealthSystem.Models.Users.User");

                    b.Property<int?>("HealthPlanId")
                        .HasColumnType("int");

                    b.HasIndex("HealthPlanId");

                    b.ToTable("Customers", (string)null);
                });

            modelBuilder.Entity("HealthSystem.Models.Users.Doctor", b =>
                {
                    b.HasBaseType("HealthSystem.Models.Users.User");

                    b.Property<string>("CRMorCOREN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MedicalServiceArea")
                        .HasColumnType("int");

                    b.ToTable("Doctors", (string)null);
                });

            modelBuilder.Entity("HealthSystem.Models.Users.User", b =>
                {
                    b.OwnsOne("HealthSystem.Models.Users.User+Personal", "PersonalInfo", b1 =>
                        {
                            b1.Property<int>("Userid")
                                .HasColumnType("int");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Cpf")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Telephone")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Userid");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("Userid");
                        });

                    b.Navigation("PersonalInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("MedicalAppointment", b =>
                {
                    b.HasOne("HealthSystem.Models.Users.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MedicalService", "MedicalService")
                        .WithMany()
                        .HasForeignKey("MedicalServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthSystem.Models.Users.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Doctor");

                    b.Navigation("MedicalService");
                });

            modelBuilder.Entity("HealthSystem.Models.Users.Customer", b =>
                {
                    b.HasOne("HealthPlan", "HealthPlan")
                        .WithMany()
                        .HasForeignKey("HealthPlanId");

                    b.HasOne("HealthSystem.Models.Users.User", null)
                        .WithOne()
                        .HasForeignKey("HealthSystem.Models.Users.Customer", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HealthPlan");
                });

            modelBuilder.Entity("HealthSystem.Models.Users.Doctor", b =>
                {
                    b.HasOne("HealthSystem.Models.Users.User", null)
                        .WithOne()
                        .HasForeignKey("HealthSystem.Models.Users.Doctor", "id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
